package com.syeedode.javaconcurrencyinpractice.exploitingparallelisms;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.*;

/**
 * Author: syeedode
 * Date: 4/1/18
 */
public class FutureRenderer {

    private static final int NTHREADS = 100;
    private final ExecutorService executor = Executors.newFixedThreadPool(NTHREADS);

    void renderPage(CharSequence source) {
        final List<ImageInfo> imageInfos = scanForImageInfo(source);

        Callable<List<ImageData>> task =
                new Callable<List<ImageData>>() {
                    public List<ImageData> call() {
                        List<ImageData> result = new ArrayList<ImageData>();
                        for (ImageInfo imageInfo : imageInfos)
                            result.add(imageInfo.downloadImage());
                        return result;
                    }
                };

        Future<List<ImageData>> future = executor.submit(task);

        renderText(source);

        try {
            // When all the images are downloaded, they are rendered onto the page
            List<ImageData> imageData = future.get();

            for (ImageData data : imageData)
                renderImage(data);
        } catch (InterruptedException e) {

            // Re-assert the thread’s interrupted status
            Thread.currentThread().interrupt();

            // We don’t need the result, so cancel the task too
            future.cancel(true);
        } catch (ExecutionException e) {
            throw launderThrowable(e.getCause());
        }
    }

    private RuntimeException launderThrowable(Throwable cause) {
        return new RuntimeException(cause);
    }

    private void renderText(CharSequence source) {

    }

    private void renderImage(ImageData data) {

    }

    private List<ImageInfo> scanForImageInfo(CharSequence source) {
        return Arrays.asList(new ImageInfo[0]);
    }
}